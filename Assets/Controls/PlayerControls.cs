//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Map0"",
            ""id"": ""f95c7d64-77c4-4b8c-834a-7ebd40794781"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""d784fd0e-dd74-4d16-822f-f832492df1c1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""27565fe1-3f6c-49c1-a29d-c0436cef5f32"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""0d8bdb9a-218f-4ea8-943d-e137161e1f88"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""443f2a6d-8b71-44c1-99a3-8195ad8add77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""d04ef757-a2b6-4eb9-a3bd-25d1eeffec6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Launcher"",
                    ""type"": ""Button"",
                    ""id"": ""3f16a00f-a419-46ed-af43-c20c0c97ec29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Knife"",
                    ""type"": ""Button"",
                    ""id"": ""42ad2ba9-ad58-4bf2-bfd1-2475d60db615"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""a14f484c-7ee9-4882-8f8b-08c0f91bd6df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e1392f64-de4c-4543-b86c-30281d048acf"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66abe524-10ae-4bc7-a2dd-33fe41a64d23"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fd58ca1-176c-401c-a581-ad6fb7414610"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45102fbe-8125-4715-9f4b-55eeb11bda10"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c07ce825-42a2-4264-9899-929f78e11b39"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c106559-4193-4c74-b0cc-799d7939161e"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Launcher"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e163956a-9c12-4848-82d9-50a89326f884"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Knife"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84dc0115-c53a-4785-8aa5-84528ee9221b"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Map0
        m_Map0 = asset.FindActionMap("Map0", throwIfNotFound: true);
        m_Map0_Walk = m_Map0.FindAction("Walk", throwIfNotFound: true);
        m_Map0_Look = m_Map0.FindAction("Look", throwIfNotFound: true);
        m_Map0_Jump = m_Map0.FindAction("Jump", throwIfNotFound: true);
        m_Map0_Fire = m_Map0.FindAction("Fire", throwIfNotFound: true);
        m_Map0_Crouch = m_Map0.FindAction("Crouch", throwIfNotFound: true);
        m_Map0_Launcher = m_Map0.FindAction("Launcher", throwIfNotFound: true);
        m_Map0_Knife = m_Map0.FindAction("Knife", throwIfNotFound: true);
        m_Map0_Menu = m_Map0.FindAction("Menu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Map0
    private readonly InputActionMap m_Map0;
    private List<IMap0Actions> m_Map0ActionsCallbackInterfaces = new List<IMap0Actions>();
    private readonly InputAction m_Map0_Walk;
    private readonly InputAction m_Map0_Look;
    private readonly InputAction m_Map0_Jump;
    private readonly InputAction m_Map0_Fire;
    private readonly InputAction m_Map0_Crouch;
    private readonly InputAction m_Map0_Launcher;
    private readonly InputAction m_Map0_Knife;
    private readonly InputAction m_Map0_Menu;
    public struct Map0Actions
    {
        private @PlayerControls m_Wrapper;
        public Map0Actions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_Map0_Walk;
        public InputAction @Look => m_Wrapper.m_Map0_Look;
        public InputAction @Jump => m_Wrapper.m_Map0_Jump;
        public InputAction @Fire => m_Wrapper.m_Map0_Fire;
        public InputAction @Crouch => m_Wrapper.m_Map0_Crouch;
        public InputAction @Launcher => m_Wrapper.m_Map0_Launcher;
        public InputAction @Knife => m_Wrapper.m_Map0_Knife;
        public InputAction @Menu => m_Wrapper.m_Map0_Menu;
        public InputActionMap Get() { return m_Wrapper.m_Map0; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Map0Actions set) { return set.Get(); }
        public void AddCallbacks(IMap0Actions instance)
        {
            if (instance == null || m_Wrapper.m_Map0ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Map0ActionsCallbackInterfaces.Add(instance);
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Launcher.started += instance.OnLauncher;
            @Launcher.performed += instance.OnLauncher;
            @Launcher.canceled += instance.OnLauncher;
            @Knife.started += instance.OnKnife;
            @Knife.performed += instance.OnKnife;
            @Knife.canceled += instance.OnKnife;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        private void UnregisterCallbacks(IMap0Actions instance)
        {
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Launcher.started -= instance.OnLauncher;
            @Launcher.performed -= instance.OnLauncher;
            @Launcher.canceled -= instance.OnLauncher;
            @Knife.started -= instance.OnKnife;
            @Knife.performed -= instance.OnKnife;
            @Knife.canceled -= instance.OnKnife;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        public void RemoveCallbacks(IMap0Actions instance)
        {
            if (m_Wrapper.m_Map0ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMap0Actions instance)
        {
            foreach (var item in m_Wrapper.m_Map0ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Map0ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Map0Actions @Map0 => new Map0Actions(this);
    public interface IMap0Actions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnLauncher(InputAction.CallbackContext context);
        void OnKnife(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
}
